{"ast":null,"code":"var _jsxFileName = \"/Users/praiseomeire/Documents/forms/src/components/SimpleInput.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SimpleInput = props => {\n  _s();\n  // const nameInputRef = useRef()\n  const [enteredName, setEnteredName] = useState('');\n  // const [enteredNameIsValid, setEnteredNameIsValid] = useState(false)\n  const [enteredNameTouched, setEnteredNameTouched] = useState(false);\n  const [formIsValid, setFormIsValid] = useState(false);\n  const enteredNameIsValid = enteredName.trim() !== '';\n  const nameInputIsInvalid = !enteredNameIsValid && enteredNameTouched;\n\n  //form input validity\n  useEffect(() => {}, [enteredNameIsValid]);\n  const nameInputChangeHandler = event => {\n    setEnteredName(event.target.value);\n\n    // if(enteredName.trim() !== ''){\n    //   setEnteredNameIsValid(true)\n    // }\n  };\n\n  const nameInputBlurHandler = event => {\n    setEnteredNameTouched(true);\n  };\n  const formSubmissionHandler = event => {\n    event.preventDefault();\n    setEnteredNameTouched(true);\n    if (!enteredNameIsValid) {\n      return;\n    }\n    // setEnteredNameIsValid(true)\n\n    console.log(enteredName);\n\n    // const enteredValue = nameInputRef.current.value;\n    // console.log(enteredValue);\n\n    // nameInputRef.current.value = ' ' // not ideal. dont manipulate the dom\n\n    setEnteredName('');\n    setEnteredNameTouched(false);\n  };\n  const nameInputClasses = nameInputIsInvalid ? 'form-control invalid' : 'form-control';\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: formSubmissionHandler,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: nameInputClasses,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"name\",\n        children: \"Your Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"name\",\n        onChange: nameInputChangeHandler,\n        onBlur: nameInputBlurHandler,\n        value: enteredName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this), nameInputIsInvalid && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-text\",\n        children: \"Invalid input\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 32\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-actions\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 5\n  }, this);\n};\n_s(SimpleInput, \"0gOgJILy4SAo8AFc6nXz38Q86n4=\");\n_c = SimpleInput;\nexport default SimpleInput;\nvar _c;\n$RefreshReg$(_c, \"SimpleInput\");","map":{"version":3,"names":["useEffect","useState","jsxDEV","_jsxDEV","SimpleInput","props","_s","enteredName","setEnteredName","enteredNameTouched","setEnteredNameTouched","formIsValid","setFormIsValid","enteredNameIsValid","trim","nameInputIsInvalid","nameInputChangeHandler","event","target","value","nameInputBlurHandler","formSubmissionHandler","preventDefault","console","log","nameInputClasses","onSubmit","children","className","htmlFor","fileName","_jsxFileName","lineNumber","columnNumber","type","id","onChange","onBlur","_c","$RefreshReg$"],"sources":["/Users/praiseomeire/Documents/forms/src/components/SimpleInput.js"],"sourcesContent":["import { useEffect, useState } from \"react\";\n\n\nconst SimpleInput = (props) => {\n  // const nameInputRef = useRef()\nconst [enteredName, setEnteredName] =  useState('')\n// const [enteredNameIsValid, setEnteredNameIsValid] = useState(false)\nconst [enteredNameTouched, setEnteredNameTouched] = useState(false)\nconst [formIsValid, setFormIsValid] = useState(false)\n\nconst enteredNameIsValid = enteredName.trim() !== '';\n\nconst nameInputIsInvalid = !enteredNameIsValid && enteredNameTouched\n\n\n//form input validity\nuseEffect(() => {\n\n}, [enteredNameIsValid])\n\nconst nameInputChangeHandler = event => {\n\n  setEnteredName(event.target.value)\n\n// if(enteredName.trim() !== ''){\n//   setEnteredNameIsValid(true)\n// }\n\n}\n\nconst nameInputBlurHandler = event => {\n  setEnteredNameTouched(true)\n}\n\nconst formSubmissionHandler = event => {\nevent.preventDefault()\n\nsetEnteredNameTouched(true)\n\nif(!enteredNameIsValid){\n  return;\n}\n// setEnteredNameIsValid(true)\n\nconsole.log(enteredName)\n\n// const enteredValue = nameInputRef.current.value;\n// console.log(enteredValue);\n\n// nameInputRef.current.value = ' ' // not ideal. dont manipulate the dom\n\nsetEnteredName('');\nsetEnteredNameTouched(false);\n};\n\n\n\nconst nameInputClasses = nameInputIsInvalid ? 'form-control invalid' : 'form-control';\n\n\n  return (\n    <form onSubmit={formSubmissionHandler}>\n      <div className={nameInputClasses}>\n        <label htmlFor='name'>Your Name</label>\n        <input \n         type='text' \n         id='name' \n         onChange= {nameInputChangeHandler}\n        onBlur={nameInputBlurHandler}\n        value={enteredName}/>\n\n        {nameInputIsInvalid && <p className=\"error-text\">Invalid input</p>}\n      </div>\n      <div className=\"form-actions\">\n        <button>Submit</button>\n      </div>\n    </form>\n  );\n};\n\nexport default SimpleInput;\n"],"mappings":";;AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAG5C,MAAMC,WAAW,GAAIC,KAAK,IAAK;EAAAC,EAAA;EAC7B;EACF,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAIP,QAAQ,CAAC,EAAE,CAAC;EACnD;EACA,MAAM,CAACQ,kBAAkB,EAAEC,qBAAqB,CAAC,GAAGT,QAAQ,CAAC,KAAK,CAAC;EACnE,MAAM,CAACU,WAAW,EAAEC,cAAc,CAAC,GAAGX,QAAQ,CAAC,KAAK,CAAC;EAErD,MAAMY,kBAAkB,GAAGN,WAAW,CAACO,IAAI,EAAE,KAAK,EAAE;EAEpD,MAAMC,kBAAkB,GAAG,CAACF,kBAAkB,IAAIJ,kBAAkB;;EAGpE;EACAT,SAAS,CAAC,MAAM,CAEhB,CAAC,EAAE,CAACa,kBAAkB,CAAC,CAAC;EAExB,MAAMG,sBAAsB,GAAGC,KAAK,IAAI;IAEtCT,cAAc,CAACS,KAAK,CAACC,MAAM,CAACC,KAAK,CAAC;;IAEpC;IACA;IACA;EAEA,CAAC;;EAED,MAAMC,oBAAoB,GAAGH,KAAK,IAAI;IACpCP,qBAAqB,CAAC,IAAI,CAAC;EAC7B,CAAC;EAED,MAAMW,qBAAqB,GAAGJ,KAAK,IAAI;IACvCA,KAAK,CAACK,cAAc,EAAE;IAEtBZ,qBAAqB,CAAC,IAAI,CAAC;IAE3B,IAAG,CAACG,kBAAkB,EAAC;MACrB;IACF;IACA;;IAEAU,OAAO,CAACC,GAAG,CAACjB,WAAW,CAAC;;IAExB;IACA;;IAEA;;IAEAC,cAAc,CAAC,EAAE,CAAC;IAClBE,qBAAqB,CAAC,KAAK,CAAC;EAC5B,CAAC;EAID,MAAMe,gBAAgB,GAAGV,kBAAkB,GAAG,sBAAsB,GAAG,cAAc;EAGnF,oBACEZ,OAAA;IAAMuB,QAAQ,EAAEL,qBAAsB;IAAAM,QAAA,gBACpCxB,OAAA;MAAKyB,SAAS,EAAEH,gBAAiB;MAAAE,QAAA,gBAC/BxB,OAAA;QAAO0B,OAAO,EAAC,MAAM;QAAAF,QAAA,EAAC;MAAS;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAQ,eACvC9B,OAAA;QACC+B,IAAI,EAAC,MAAM;QACXC,EAAE,EAAC,MAAM;QACTC,QAAQ,EAAGpB,sBAAuB;QACnCqB,MAAM,EAAEjB,oBAAqB;QAC7BD,KAAK,EAAEZ;MAAY;QAAAuB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAE,EAEpBlB,kBAAkB,iBAAIZ,OAAA;QAAGyB,SAAS,EAAC,YAAY;QAAAD,QAAA,EAAC;MAAa;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAI;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAC9D,eACN9B,OAAA;MAAKyB,SAAS,EAAC,cAAc;MAAAD,QAAA,eAC3BxB,OAAA;QAAAwB,QAAA,EAAQ;MAAM;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAS;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QACnB;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACD;AAEX,CAAC;AAAC3B,EAAA,CA3EIF,WAAW;AAAAkC,EAAA,GAAXlC,WAAW;AA6EjB,eAAeA,WAAW;AAAC,IAAAkC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}