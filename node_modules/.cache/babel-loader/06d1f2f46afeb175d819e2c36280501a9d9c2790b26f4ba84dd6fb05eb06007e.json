{"ast":null,"code":"var _jsxFileName = \"/Users/praiseomeire/Documents/forms/src/components/SimpleInput.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useRef, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SimpleInput = props => {\n  _s();\n  const nameInputRef = useRef();\n  const [enteredName, setEnteredName] = useState('');\n  const [enteredNameIsValid, setEnteredNameIsValid] = useState(false);\n  const [enteredNameTouched, setEnteredNameTouched] = useState(false);\n  useEffect(() => {\n    if (enteredNameIsValid) {\n      console.log('invalid name input');\n    }\n  }, [enteredNameIsValid]);\n  const nameInputChangeHandler = event => {\n    setEnteredName(event.target.value);\n  };\n  const nameInputBlurHandler = event => {\n    setEnteredNameTouched(true);\n  };\n  const formSubmissionHandler = event => {\n    event.preventDefault();\n    setEnteredNameTouched(true);\n    if (enteredName.trim() === '') {\n      setEnteredNameIsValid(false);\n      return;\n    }\n    setEnteredNameIsValid(true);\n    console.log(enteredName);\n    const enteredValue = nameInputRef.current.value;\n    console.log(enteredValue);\n\n    // nameInputRef.current.value = ' ' // not ideal. dont manipulate the dom\n\n    setEnteredName('');\n  };\n  const nameInputIsInvalid = !enteredNameIsValid && enteredNameTouched;\n  const nameInputClasses = nameInputIsInvalid ? 'form-control invalid' : 'form-control';\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: formSubmissionHandler,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: nameInputClasses,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"name\",\n        children: \"Your Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        ref: nameInputRef,\n        type: \"text\",\n        id: \"name\",\n        onChange: nameInputChangeHandler,\n        onBlur: nameInputBlurHandler,\n        value: enteredName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this), nameInputIsInvalid && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-text\",\n        children: \"Invalid input\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 32\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-actions\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n};\n_s(SimpleInput, \"NpBdDjtGXxwhrEFo1Ma3zaY+Jak=\");\n_c = SimpleInput;\nexport default SimpleInput;\nvar _c;\n$RefreshReg$(_c, \"SimpleInput\");","map":{"version":3,"names":["useEffect","useRef","useState","jsxDEV","_jsxDEV","SimpleInput","props","_s","nameInputRef","enteredName","setEnteredName","enteredNameIsValid","setEnteredNameIsValid","enteredNameTouched","setEnteredNameTouched","console","log","nameInputChangeHandler","event","target","value","nameInputBlurHandler","formSubmissionHandler","preventDefault","trim","enteredValue","current","nameInputIsInvalid","nameInputClasses","onSubmit","children","className","htmlFor","fileName","_jsxFileName","lineNumber","columnNumber","ref","type","id","onChange","onBlur","_c","$RefreshReg$"],"sources":["/Users/praiseomeire/Documents/forms/src/components/SimpleInput.js"],"sourcesContent":["import { useEffect, useRef, useState } from \"react\";\n\n\nconst SimpleInput = (props) => {\n  const nameInputRef = useRef()\nconst [enteredName, setEnteredName] =  useState('')\nconst [enteredNameIsValid, setEnteredNameIsValid] = useState(false)\nconst [enteredNameTouched, setEnteredNameTouched] = useState(false)\n\n\n\nuseEffect(()=> {\n  if(enteredNameIsValid) {\n    console.log('invalid name input')\n  }\n}, [enteredNameIsValid])\n\nconst nameInputChangeHandler = event => {\n\n  setEnteredName(event.target.value)\n\n}\n\nconst nameInputBlurHandler = event => {\n  setEnteredNameTouched(true)\n}\n\nconst formSubmissionHandler = event => {\nevent.preventDefault()\n\nsetEnteredNameTouched(true)\n\nif(enteredName.trim() === ''){\n  setEnteredNameIsValid(false)\n  return;\n}\nsetEnteredNameIsValid(true)\n\nconsole.log(enteredName)\nconst enteredValue = nameInputRef.current.value;\nconsole.log(enteredValue);\n\n// nameInputRef.current.value = ' ' // not ideal. dont manipulate the dom\n\nsetEnteredName('');\n};\n\nconst nameInputIsInvalid = !enteredNameIsValid && enteredNameTouched\n\nconst nameInputClasses = nameInputIsInvalid ? 'form-control invalid' : 'form-control';\n\n\n  return (\n    <form onSubmit={formSubmissionHandler}>\n      <div className={nameInputClasses}>\n        <label htmlFor='name'>Your Name</label>\n        <input ref={nameInputRef} type='text' id='name' onChange= {nameInputChangeHandler}\n        onBlur={nameInputBlurHandler}\n        value={enteredName}/>\n\n        {nameInputIsInvalid && <p className=\"error-text\">Invalid input</p>}\n      </div>\n      <div className=\"form-actions\">\n        <button>Submit</button>\n      </div>\n    </form>\n  );\n};\n\nexport default SimpleInput;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}